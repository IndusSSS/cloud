services:
  db:
    image: postgres:16-alpine
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-cloud}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-cloudpass}
      POSTGRES_DB: ${POSTGRES_DB:-cloud_db}
    volumes:
      - db_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U cloud -d cloud_db"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    networks: [backend]

  redis:
    image: redis:7-alpine
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    networks: [backend]

  broker:
    image: eclipse-mosquitto:2
    restart: unless-stopped
    ports: ["1884:1883"]
    volumes:
      - ./mosquitto.conf:/mosquitto/config/mosquitto.conf:ro
    healthcheck:
      test: ["CMD-SHELL", "mosquitto_pub -h localhost -t test -m test || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    networks: [backend]

  api:
    build:
      context: .
      dockerfile: Dockerfile
    command: ["uvicorn", "app.main:app", "--host", "0.0.0.0", "--port", "8000"]
    env_file: env.example
    ports: ["8082:8000"]
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
      broker:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "python", "-c", "import urllib.request; urllib.request.urlopen('http://localhost:8000/api/v1/health')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks: [backend]

  worker:
    build:
      context: .
      dockerfile: Dockerfile
    command: ["python", "-m", "app.worker"]
    env_file: env.example
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
      broker:
        condition: service_healthy
    restart: unless-stopped
    networks: [backend]

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports: ["8083:80"]
    depends_on:
      api:
        condition: service_healthy
    restart: unless-stopped
    networks: [backend]

  frontend_cloud:
    build:
      context: ./frontend_cloud
      dockerfile: Dockerfile
    depends_on:
      api:
        condition: service_healthy
    restart: unless-stopped
    networks: [backend]
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  frontend_admin:
    build:
      context: ./frontend_admin
      dockerfile: Dockerfile
    depends_on:
      api:
        condition: service_healthy
    restart: unless-stopped
    networks: [backend]
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/conf.d/cloud.conf:/etc/nginx/conf.d/default.conf:ro
      - ./nginx/conf.d/health.conf:/etc/nginx/conf.d/health.conf:ro
      - ./ssl/certs:/etc/ssl/certs:ro
      - ./ssl/private:/etc/ssl/private:ro
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    depends_on:
      frontend_cloud:
        condition: service_healthy
      frontend_admin:
        condition: service_healthy
      api:
        condition: service_healthy
    restart: unless-stopped
    networks: [backend]

volumes:
  db_data:

networks:
  backend:
