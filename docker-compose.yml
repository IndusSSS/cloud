services:
  db:
    image: postgres:16-alpine
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-cloud}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-cloudpass}
      POSTGRES_DB: ${POSTGRES_DB:-cloud_db}
    volumes:
      - db_data:/var/lib/postgresql/data
    networks: [backend]

  redis:
    image: redis:7-alpine
    restart: unless-stopped
    networks: [backend]

  broker:
    image: eclipse-mosquitto:2
    restart: unless-stopped
    ports: ["1883:1883"]
    networks: [backend]

  api:
    build:
      context: .
      dockerfile: Dockerfile
    command: ["uvicorn", "app.main:app", "--host", "0.0.0.0", "--port", "8000"]
    env_file: .env
    ports: ["8000:8000"]
    depends_on: [db, redis, broker]
    restart: unless-stopped
    networks: [backend]

  worker:
    build:
      context: .
      dockerfile: Dockerfile
    command: ["python", "-m", "app.worker"]
    env_file: .env
    depends_on: [db, redis, broker]
    restart: unless-stopped
    networks: [backend]

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports: ["8080:80"]
    depends_on: [api]
    restart: unless-stopped
    networks: [backend]

  frontend_cloud:
    build:
      context: ./frontend_cloud
      dockerfile: Dockerfile
    command: ["npm", "run", "build"]
    volumes:
      - frontend_cloud_build:/usr/share/nginx/html_cloud
    depends_on: [api]
    restart: unless-stopped
    networks: [backend]

  nginx:
    image: nginx:alpine
    ports:
      - "8081:80"
      - "443:443"
    volumes:
      - ./nginx/conf.d/cloud.conf:/etc/nginx/conf.d/default.conf:ro
      - frontend_cloud_build:/usr/share/nginx/html_cloud:ro
      - /srv/letsencrypt/conf:/etc/letsencrypt
      - /srv/letsencrypt/www:/var/www/certbot
    depends_on:
      - frontend_cloud
      - api
    restart: unless-stopped
    networks: [backend]

volumes:
  db_data:
  frontend_cloud_build:

networks:
  backend:
